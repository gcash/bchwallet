syntax = "proto3";
option go_package = "pb";

import "google/protobuf/any.proto";

message Message {
    MessageType messageType     = 1;
    google.protobuf.Any payload = 2;

    enum MessageType {
            CHANNEL_OPEN             = 0;
            CHANNEL_ACCEPT           = 1;
            INITIAL_COMMIT           = 2;
            INITIAL_COMMIT_SIGNATURE = 3;
            CHANNEL_UPDATE_PROPOSAL  = 4;
            UPDATE_PROPOSAL_ACCEPT   = 5;
            FINALIZE_UPDATE          = 6;
            SHUTDOWN                 = 7;
            ERROR                    = 8;
    }
}

message ChannelOpen {
    bytes addressID             = 1; // From address
    bytes channelPubkey         = 2; // Public key to use in the 2 of 2 multisig
    uint32 feePerByte           = 3; // The requested amount of satoshis per byte to use as a fee on the commitment transaction
    uint64 dustLimit            = 4; // The minimum output size to be included in the commitment transaction
    uint32 delay                = 5; // Number of blocks to delay payments to self when the channel is unilaterally closed
    bytes payoutScript          = 6; // The scriptpubkey to be used in the payout
    bytes revocationPubkey      = 7; // The revocation public key to use for the first commitment
}

message ChannelAccept {
    bytes channelPubkey    = 1; // Public key for the 2 of 2 multisig
    bytes payoutScript     = 2; // The scriptpubkey to be used in the payout
    bytes revocationPubkey = 3; // The revocation public key to use for the first commitment
}

message InitialCommitment {
    string fundingTxid          = 1; // The txid of the funding transaction
    uint32 fundingIndex         = 2; // The txout index which funded the multisig
    uint64 initialFundingAmount = 3; // The amount the channel will initially be funded with
}

message InitialCommitmentSignature {
    bytes signature  = 1; // The signature on the initial commitment
}

message ChannelUpdateProposal {
    string channelID            = 1; // The ID of the channel
    int64 amount                = 2; // Amount to send. This can be negative for a request but for now nodes will reject negative amounts.
    bytes newRevocationPubkey   = 3; // A new generated public key to use for the next revocation commitment
    bytes signature             = 4; // The signature on the new remote commitment
}

message UpdateProposalAccept {
    bytes newRevocationPubkey = 1; // A new generated public key to use for the next revocation commitment
    bytes signature           = 2; // A signature for the commitment input
    bytes revocationPrivkey   = 3; // The private key used to sign the breach remedy transaction
}

message FinalizeUpdate {
    bytes revocationPrivkey = 1; // The private key used to sign the breach remedy transaction
}

message Shutdown {
    string channelID = 1; // The ID of the channel
    bytes signature  = 2; // Signature on the payout transaction
}

message Error {
    string message = 1; // Error message string
}